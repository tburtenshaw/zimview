#summary Describes zmw_base_zinwell, the main executable running on the set top box.
#labels firmwarefileinfo

= Introduction =

Inside the CODE blocks on the [Zinwell] and [Olevia] set top boxes is the main application data.

The largest file in here is called zwm_base_zinwell. It is an [http://en.wikipedia.org/wiki/Executable_and_Linkable_Format ELF] executable file usually around about 7 megabytes.

This file is what is running when you are watching TV and navigating through the menus. All the menu system, preferences, recording options (on capable machines) and possibly the video display are done from this file.

= Details =

Running [http://linux.die.net/man/1/readelf readelf] on an Olevia file reveals the following:
{{{
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           MIPS R3000
  Version:                           0x1
  Entry point address:               0x400130
  Start of program headers:          52 (bytes into file)
  Start of section headers:          7476948 (bytes into file)
  Flags:                             0x50001007, noreorder, pic, cpic, o32, mips32
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         3
  Size of section headers:           40 (bytes)
  Number of section headers:         18
  Section header string table index: 17

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .reginfo          MIPS_REGINFO    00400094 000094 000018 18   A  0   0  4
  [ 2] .init             PROGBITS        004000ac 0000ac 000078 00  AX  0   0  4
  [ 3] .text             PROGBITS        00400130 000130 2e30b0 00  AX  0   0 16
  [ 4] .fini             PROGBITS        006e31e0 2e31e0 000050 00  AX  0   0  4
  [ 5] .rodata           PROGBITS        006e3230 2e3230 18c128 00   A  0   0 16
  [ 6] .eh_frame         PROGBITS        008b0000 470000 000054 00  WA  0   0  4
  [ 7] .ctors            PROGBITS        008b0054 470054 00000c 00  WA  0   0  4
  [ 8] .dtors            PROGBITS        008b0060 470060 000008 00  WA  0   0  4
  [ 9] .jcr              PROGBITS        008b0068 470068 000004 00  WA  0   0  4
  [10] .data.rel.ro      PROGBITS        008b006c 47006c 00bc3c 00  WA  0   0  4
  [11] .data             PROGBITS        008bbcc0 47bcc0 24c030 00  WA  0   0 32
  [12] .got              PROGBITS        00b07cf0 6c7cf0 007430 04 WAp  0   0 16
  [13] .sbss             NOBITS          00b0f120 6cf120 00020c 00 WAp  0   0  4
  [14] .bss              NOBITS          00b0f330 6cf120 27eb84 00  WA  0   0 16
  [15] .comment          PROGBITS        00000000 6cf120 0036d8 00      0   0  1
  [16] .pdr              PROGBITS        00000000 6d27f8 04ee60 00      0   0  4
  [17] .shstrtab         STRTAB          00000000 721658 00007c 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

There are no section groups in this file.

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  REGINFO        0x000094 0x00400094 0x00400094 0x00018 0x00018 R   0x4
  LOAD           0x000000 0x00400000 0x00400000 0x46f358 0x46f358 R E 0x1000
  LOAD           0x470000 0x008b0000 0x008b0000 0x25f120 0x4ddeb4 RW  0x1000

 Section to Segment mapping:
  Segment Sections...
   00     .reginfo 
   01     .reginfo .init .text .fini .rodata 
   02     .eh_frame .ctors .dtors .jcr .data.rel.ro .data .got .sbss .bss 

There is no dynamic section in this file.

There are no relocations in this file.

There are no unwind sections in this file.

No version information found in this file.
}}}

==What does that mean?==
Well, I don't really know! But here are some cool pictures.

Basically the ELF header in the file says where the executable parts of the file are, and where the data is.

One of those sections contains a string table - a list of all the text strings used in the program. This can be quite interesting to look at, and could give a hint as to what a function that links to it does.

Here is a screenshot of a disassembler viewing the stringtable:
http://zimview.googlecode.com/svn/wiki/dump_stringtable.png

As well as strings, the executable file contains other data. In this case many of the graphics are in the program file itself.

http://zimview.googlecode.com/svn/wiki/zmw_icons_sample.png