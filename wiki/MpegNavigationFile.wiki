#summary How do the .nav files work?
#labels recording

= Introduction =

When the [Olevia] firmware records part of a program it creates [RecordedVideo three different files].

The _nav_ files exist to help speed up navigation through the recorded video. I assume that without these, the firmware has to sift through every frame from the start if the user skips to a random location.

= Details =
The .nav file consists of a number of 64 byte (0x40 byte) records, all following each other. I have not been able to find any documentation about the file on the internet, and it may well be unique to Olevia's system.

There is no header or footer in the files, the number of records can be calculated by dividing the file size by 64.

There is a long integer in each record that points to the start of the payload data for the [MpegTransportStream video stream].

== Elucidation of the structure ==

I am in the process of trying to find out how this file works (and what it is for). Its 64 bytes most likely consists of a variation of long and short integers as well as bytes, and perhaps bit switches.

Here is one possible example

{{{

|S1|BB|S3|S4|  L5 |  L6 |  L7 |S8|S9| L10 | L11 | L12 |13|14| L15 | L16 | L17 | L18 | L19 | L20 |
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |

}}}

Each division above is two bytes. Ss (or unnumbered) are short ints, Ls are long ints, BB are two bytes. This is just a model that I working on, and very unlikely to be correct.

Here is the same in C struct form:

{{{
struct record {
   unsigned short s1;    //Sawtooth pattern, with same increments as L6
                         //Drops everytime lowbyte of var2 increases.

   unsigned short twobytes2; //I believe this is actually two bytes

                             //LOWBYTE
                             //The low byte increments by 1 every few records
                             //Its increase is coincidental with the sawtooth drop of s1
                             //It resets itself at the same time as l12 does.
                             //It usually stays ten or under (usually in the single digits)

                             //HIBYTE
                             //The high byte seems to be of value either 1, 2 or 3

   unsigned short s3;    //Increments by 256 each record (?may be misreading by a byte)
                         //Sawtooth pattern
                         //Drops the record after s12
                         //Period between ~23 and ~71, usually an odd number

   unsigned short s4;    //Always 8

   unsigned long l5zero;    //Always zero

   unsigned long l6;    //Near linear, but varying increments averaging 12700 (max 69000, min 1800)
                        //Larger change of values generally coincide with sawtooth drop of s3
                        //Strongly suspect this refers to a byte in the associated mpg file...
                        //It seems to coincide with a payload indicator of the video PID.

   unsigned long l7;    //VERY high number, slowly increases linearly, with superimposed wave of period 7
                        //(+900, -4500, +900, -2700, +900, +2700, +900, +8100)
                        //Could this be Presentation or Decoding Time Stamp?
                        //Looks to be 50% of program_clock_reference_base (this is a 33bit value in the MPEG-TS)
                        //Actually, it seems to be the 32 high bits of the 33 bit PTS.
   unsigned short s8;

   unsigned short s9zero;    //Zero

   unsigned long l10;

   unsigned long l11zero;    //Zero

   unsigned long l12;    //Sawtooth pattern.
                         //Goes up by exactly same as l6 (about 9000-20000) each record.
                         //Period exactly same as s3, except fall happens one record prior.
                         //Maximum not limited by type of int

   unsigned short s13;   //Always 30

   unsigned short s14zero;   //All these below are typically (?always) zero
   unsigned long l15zero;    //
   unsigned long l16zero;    //
   unsigned long l17zero;    //
   unsigned long l18zero;    //
   unsigned long l19zero;    //
   unsigned long l20zero;    //
};

}}}

=== Graphical representation of some of these values ===

You can see what I mean by sawtooth pattern on s3. If the downward drop coincides with an increment of a neighbouring value and the limit on a integers size, it is reasonable to suggest that the neighbour is part of the same variable. (This is how I guessed the variables that are likely long integers).

http://zimview.googlecode.com/svn/wiki/navfile_graph_example.png